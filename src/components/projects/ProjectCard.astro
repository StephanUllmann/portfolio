---
interface Props {
  project: Project;
  href: string;
  index: number;
}
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const { project, href, index } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/images/**/*.{jpeg,jpg,png,gif.webp}",
);
if (!images[project.image.src])
  throw new Error(
    `"${project.image.src}" does not exist in glob: "/src/images/**/*.{jpeg,jpg,png,gif.webp}"`,
  );
const iconmap: { [key: string]: string } = {
  css: "css",
  ts: "ts",
  typescript: "ts",
  go: "go",
  csharp: "csharp",
};
// <!-- transition:name={project.title} -->
// width={230}
// height={135}
---

<li>
  <a href={`/projects/${href}`} class="card">
    <Image
      src={images[project.image.src]()}
      alt={project.image.alt}
      class="fancy-border project-img"
      quality={"high"}
      style={{ animationDelay: 50 * index + "ms" }}
      transition:name={href + "-image"}
    />
    <div class="content">
      <h2>{project.title}</h2>
      <ul>
        {
          project.tags.map((tag) => (
            <li>
              {iconmap[tag.toLowerCase()] ? (
                <Icon name={iconmap[tag.toLowerCase()]} />
              ) : (
                <span class="badge">{tag}</span>
              )}
            </li>
          ))
        }
      </ul>
    </div>
  </a>
</li>

<style>
  .card {
    display: grid;
    justify-items: center;
  }
  .img-wrapper {
    border-radius: 1rem;
    overflow: clip;
  }
  .project-img {
    width: 14.5rem;
    height: 8.5rem;
  }
  @keyframes rotate {
    from {
      --deg: 5deg;
    }
    to {
      --deg: 120deg;
    }
  }
  .content {
    padding: 0.5rem 1rem;
  }
  h2 {
    font-size: 1.25rem;
  }
  ul {
    display: flex;
    justify-content: center;
    gap: 0.5rem;

    & > * {
      font-size: 0.815rem;
    }
  }
</style>
