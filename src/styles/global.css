*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

:root {
  --base: hsl(167, 92%, 19%);

  --accent: hsl(from var(--base) calc(h + 80) s l);
}

html {
  box-sizing: border-box;
  color-scheme: dark light;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',
    'Helvetica Neue', sans-serif;
}

.layout {
  display: grid;
  grid-template-columns:
    [full-start] minmax(6rem, 1fr) [content-start] minmax(min-content, 1800px) [content-end] minmax(6rem, 1fr)
    [full-end];

  @media screen and (width < 712px) {
    grid-template-columns: [full-start]1rem [content-start] 1fr [content-end]1rem[ full-end];
  }
}

header {
  grid-column: content;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;

  ul {
    display: flex;
    list-style: none;
    gap: 1rem;
  }
  a {
    color: inherit;
    text-decoration: none;
    font-size: 0.9rem;
    text-underline-offset: 2px;
    text-decoration-skip-ink: all;
    &:hover {
      text-decoration: underline;
    }
  }
}

main {
  grid-column: content;
}

.tags {
  display: flex;
  gap: 1rem;
  margin-block: 1rem;
  & > * {
    padding: 0.25rem 0.75rem;
    background-color: var(--base);
    border-radius: 1rem;
  }
}

pre:has(code) {
  padding: 1rem 1.5rem;
  margin-block: 0.5rem;
  border-radius: 0.5rem;
  /* cursor: pointer; */
  /* position: relative; */
  /* &::after {
    content: 'ðŸ“‹';
    position: absolute;
    top: 1rem;
    right: 1.5rem;
    opacity: 0;
    transition: opacity 200ms ease-in-out;
  }
  &:hover::after {
    opacity: 1;
    transition: opacity 200ms ease-in-out;
  } */
}

.expressive-code {
  margin-block: 1rem;
}
