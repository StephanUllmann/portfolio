---
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import Tags from "../../components/Tags.astro";

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection("projects");
  return blogEntries.map((e) => ({
    params: { id: e.id },
    props: { project: e },
  }));
}) satisfies GetStaticPaths;

const { project } = Astro.props;
---

<BaseLayout title={project.data.title}>
  <div class="center">
    <web-carousel>
      <div class="carousel-wrapper">
        <button
          class="fancy-btn scroll-btn scroll-btn-left"
          data-direction="left">&vartriangleleft;</button
        >
        <div class="carousel fancy-border">
          {
            project.data.images.map((image) => (
              <Image
                src={image.src}
                alt={image.alt}
                width={image.x || 500}
                height={image.y || 300}
              />
            ))
          }
        </div>
        <button
          class="fancy-btn scroll-btn scroll-btn-right"
          data-direction="right">&vartriangleright;</button
        >
      </div>
    </web-carousel>
    <h1>{project.data.title}</h1>
    <p>{project.data.description}</p>
    <Tags tags={project.data.tags} />
  </div>
</BaseLayout>

<script>
  class Carousel extends HTMLElement {
    #btnLeft;
    #btnRight;
    #carousel;
    #carouselWidth;
    #itemCount;
    #totalWidth;

    constructor() {
      super();
      this.#btnLeft = this.querySelector(
        ".scroll-btn-left",
      )! as HTMLButtonElement;
      this.#btnRight = this.querySelector(
        ".scroll-btn-right",
      )! as HTMLButtonElement;
      this.#carousel = this.querySelector(".carousel")!;
      this.#carouselWidth = this.#carousel.getBoundingClientRect().width;
      this.#itemCount = [...this.#carousel.childNodes].filter(
        (c) => c.nodeName === "IMG",
      ).length;

      this.#totalWidth = this.#itemCount * this.#carouselWidth;
    }
    connectedCallback() {
      this.#carousel.scrollLeft = 0;
      this.#btnLeft.addEventListener("click", this.#handleClick);
      this.#btnRight.addEventListener("click", this.#handleClick);
    }

    disconnectedCallback() {
      this.#btnLeft.removeEventListener("click", this.#handleClick);
      this.#btnRight.removeEventListener("click", this.#handleClick);
    }

    #handleClick = (e: Event) => {
      const direction =
        (e.target as HTMLElement).dataset.direction === "left" ? -1 : 1;
      this.#moveCarousel(direction);
    };

    #moveCarousel(direction: -1 | 1) {
      if (this.#carousel.scrollLeft + this.#carouselWidth * direction <= 0)
        this.#carousel.scrollLeft = this.#totalWidth;
      else if (
        this.#totalWidth < this.#carousel.scrollLeft + this.#carouselWidth &&
        direction > 0
      )
        this.#carousel.scrollLeft = 0;
      else this.#carousel.scrollLeft += this.#carouselWidth * direction;
    }
  }
  customElements.define("web-carousel", Carousel);
</script>

<style>
  .center {
    margin-block: 3rem;
  }
  .carousel-wrapper {
    position: relative;
    width: 100%;
    /* height: fit-content; */
    margin-inline: 2vmin;
    aspect-ratio: 16/9;
  }
  .carousel {
    margin-block: 1rem;
    display: flex;
    gap: 1rem;
    overflow-x: scroll;
    align-items: center;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
      display: none;
    }
  }

  @property --z {
    syntax: "<number>";
  }
  img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    scroll-snap-align: center;
    border-radius: 1.2rem;
  }

  .scroll-btn {
    position: absolute;
    left: 1rem;
    cursor: pointer;
    top: 50%;
    transform: translateY(-50%);
  }

  .scroll-btn-right {
    left: auto;
    right: 1rem;
  }

  .carousel-wrapper:has(.carousel > img:only-child) .scroll-btn {
    visibility: hidden;
  }
</style>
